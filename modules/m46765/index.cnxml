<document xmlns="http://cnx.rice.edu/cnxml">
  <title>The Bugs</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m46765</md:content-id>
  <md:title>The Bugs</md:title>
  <md:abstract>There are always bugs.  This chapter discusses them and how we resolved them.</md:abstract>
  <md:uuid>0632fa14-75d5-4227-b468-bd68177bd6e8</md:uuid>
</metadata>

<content>
    <section id="eip-133"><title>Introduction</title>
	<para id="eip-175">
	In the initial production run of the Speak N Spell there were several bugs that caused some difficulties but did not stop us from going into production. I classified them as bugs, rather than features, as they were problems that the end user had to live with, and we couldn't figure out how to make them look like features. There were other issues that were not obvious to the end user, these will be discussed in a later chapter. The bugs discussed in this chapter will cover all of the aspects of the product: Hardware, Software, and even the Plastic Case.
	</para></section>
	
	<section id="eip-134"><title>On/Off switch</title>
    <para id="import-auto-id1167969065340">
	This bug was a system level hardware issue.  It was the result of my brilliance which made it a bit personally embarrassing, but also made it relatively easy to fix without widespread recognition.
	</para>
		
    <para id="import-auto-id1167970651228">I had decided that an on/off switch was going to add too much cost to the systems so I devised a scheme that allowed for a “software” on and off key. It was simple. When the user pushed the ON key, a connection was made to the power supply module. As long as the ON key was pressed, the power supply would remain on. As the controller chip (TMC0271) powered on, it turned on one of the bit I/O lines that was attached to the same input as the ON key was attached, thus holding the power supply on after the ON key was released. To turn the Speak N Spell off, the controller chip only had to reset the bit I/O line. This reset could be accomplished either by pressing the OFF key or by the controller chip resetting the line after a period of inactivity. </para><para id="import-auto-id1167971463193">This, of course, was brilliant as I saw it. We didn’t need to have an on/off switch and the product could power itself down if left unattended. Before you nod your head and think, "what is so brilliant about this?", you must remember that, at the time of the design, automatic power down circuits were not common, and, when available were more expensive than an on/off switch.</para><para id="import-auto-id8374393">Unfortunately, there was an issue to the design.  It showed its ugly head during power down.  As the power was being turned off and the voltage rail was decaying from 10 volts to zero, there came a point where the chip-set became erratic, but still functioning even though it was below the minimum voltage specification.  That meant that in some Speak N Spells, the controller chip demonstrated its erratic nature by setting the bit I/O line and turn the Speak N Spell back on.  This could be classified as two different bugs: 1) the product wouldn't turn off, and 2) it only happened on some of the products, some of the time.</para><para id="import-auto-id1167970693688">I didn’t have a back up plan, and I didn’t have anyone who I could consult with to resolve the issue. I was going to have to admit to the world that we had made a major break through in the state of the art of electronics, except it couldn’t turn off. Yes, on/off switch technology was relatively mature at the time.  </para><para id="import-auto-id1167971365533">As an aside, this was my first experience facing an impossible task and realizing I had no one who could help. The panic was overwhelming. To take this aside a bit further, the next time I faced an impossible task, I wasn’t nearly as panicked. The third time, I found it exciting. I now am not interested in doing the possible as I'll gladly leave the possible to practicing engineers. Unless it is impossible, I’m not interested – give it to someone else. I have gone from panic to excitement when faced with the impossible. To go a step further, I formulated a second definition of "impossible":</para><list id="eip-447"><item>It cannot be done.</item>
<item>It hasn't been done yet.</item>
</list><para id="eip-203">I have learned to always assume the second definition as correct until proven wrong.  It continues to amaze me how many engineers and scientist always assume the first definition until proven otherwise.</para><para id="import-auto-id1167970707202">Now back to the story. After thinking about it a bit, I discovered a tricky little circuit using a resistor, capacitor and a silicon controlled rectifier (SCR) that not only solved the problem, but could be used on the existing printed circuit boards (PCB) with minor modification. As in any production environment, the ability to rework a populated PCB rather than throwing it away was always a winner. Even with a repair procedure in place, a second version of the PCB was created with the fix in place. And, before you ask, the fix was still cheaper than an on/off switch. It also was only needed as a repair to a small portion of the products. Figure 1 shows the permanent fix to the bug.</para><para id="eip-603"><figure id="import-auto-id1167969036523">
<media id="import-auto-id1167971779033" alt="">
        <image mime-type="image/jpg" src="../../media/graphics2-8319.jpg" height="363" width="581"/>
      </media>

<caption>A view of the printed circuit board and two calculator keyboards.  Note, just above the keyboards on the left the three components inserted to resolve the on/off problem.</caption>
</figure></para><para id="eip-814">The idea behind the SCR circuit was to have the SCR turn off the power supply once the bit line was turned off by the TMC0271. Once turned off, the SCR circuit could not turn on again until the on button was pressed. If you ever get a chance to tear one of the first year Speak N Spells apart you might see an example of the repair.</para>
</section>

<section id="eip-135"><title>Garbled Speech (Software)</title><para id="import-auto-id1167970286793">We had a phenomena on the Speak N Spell that we called garbled speech.  Garbled speech was just as it sounds, the Speak N Spell would put out an utterance which was imperceptible, mostly.  The reason I say “mostly” is that the software version of the phenomena would actually, every once in a while, actually say something that was recognizable.</para><para id="import-auto-id1167970517729">There was a module key on the Speak N Spell, when pushed would send the product out to the module for the vocabulary words rather than using the ones on the product itself. What we failed to do was perform a simple handshake between the controller chip and the module to see if there was actually a module there. Without the handshake, the Speak N spell, when in the module mode, would try to pronounce whatever came over the open bus from the module connector. To add to the problem, sometimes it would magically pick up a bit of data from the on board vocabulary memories and pronounce it.</para><para id="import-auto-id1167968992979">We explained to the early users of the Speak N Spell what the problem was and how to fix it (i.e., press the Module key again). It was resolved simply by adding a handshake to the program.</para><para id="import-auto-id1167970358858">But, as usual, not all is that simple.  We received a letter from one of our customers.  In the letter was the explanation of how the “garbled” speech sounded in his Speak N Spell.  Also enclosed was an audio cassette on which he had recorded the Speak N Spell saying a dirty word during the sequence of garbled speech.  The letter’s explanation of the cassette recording was simple.  It went something like this.</para>
    <para id="import-auto-id1167970223794">“I know that you would like me to return the Speak N Spell so that you can verify what it is saying and fix it for me.  But, I want to keep it as it is.  I’ve sent you the cassette so that you know what it is saying.”</para>
    <para id="import-auto-id1160779">That seems to have been the only foul mouthed Speak N Spell that we shipped.</para>
    <para id="eip-455">As soon as we determined the problem, our software development team, Glen Thornton, released a new version with the handshake included. That was the end of the software version with the garbled speech bug.</para>
	</section>
<section id="eip-136"><title>Garbled Speech (Hardware)</title>
    <para id="import-auto-id1167972287180">A second version of the garbled speech phenomena ended up being a hardware bug.  It exhibited itself as randomly powering up in a mode that generated garbled speech.  This is one of those times when I had to manipulate the various design teams.  I sat down with the software engineers on the program and said to them “I know that this is a hardware problem, but the hardware guys are not willing to admit it.  Could I get you to help me by finding a fix for the bug?  And, please don’t tell the hardware guys you are doing it as it will make them mad.”  I then sat down with the hardware team and said “I know that this is a software problem, but the software guys are not willing to admit it.  Could I get you to help me by finding a fix for the bug?  And, please don’t tell the software guys you are doing it as it will make them mad.”  So I had each working on a solution independently.  I then worked for a production solution independently with the product engineers on the production line.</para><para id="import-auto-id1167970263079">I found that for some reason, if I put ceramic capacitors on the communications lines between the controller chip and the synthesizer chip the problem would go away.  As I spoke to both sides (hardware and software) neither could give me a good technical explanation of why the capacitors solved the problem.  But, as it did and was an easy fix on the production line, I introduced it to the production flow, first as a repair technique.  Later it was made a permanent addition to the production line as it was cheaper (once we modified the PC board to allow auto insertion of the capacitors) than making it a repair procedure.  As I had done many times in the past, the ceramic capacitors I called out were ones with a large number in "excess" stock.  Because they were in excess stock (we had more than needed to keep the production lines up and running) the effective cost of the capacitors was zero and we didn't have to wait for a new shipment of parts to fix the bug.</para><para id="import-auto-id1167970271506">As we got further into the production run of the Speak N Spell, we found the line shutting down periodically for this reason.  At one point when the line went down we finally realized that the wafer fabs had switched recipes with another product.  It was easy to correlate the recipe change to both products having issues in production.  That particular time I was the featured presenter at a meeting with our senior management.  The agenda was simple:  the production manager presented how bad the design was, then the quality manager presented how bad the quality was and then I got up to defend the design with the expected result of my being fired.  Fortunately I survived and we moved forward with a solution to the problem.</para>
    <para id="import-auto-id1167971737584">But that solution wasn’t permanent.  The line still periodically shut down as a result of the bug.  Then, finally, the bug was found and quietly fixed.  It seems that the state machine on the speech synthesis chip had a 22 state counter.  The counter was simply a 32 bit counter that reset at the count of 22.  Unfortunately, the 10 undefined states were not designed to drive the counter back to zero.  Once in the unknown part of the counter, it would go in an undefined loop with garble.  So, the bug went away.  And, no, to this day, I still can’t explain why the four capacitors solved the problem.  Nor do I care to.</para>
    <para id="import-auto-id1167970384431">Obviously, this was the hardest bug of all to fix.  It nearly cost me my job at TI.  But the personal gain was a significant increase in my confidence and reputation within the company.  </para>
    </section>
<section id="eip-137"><title>Broken Keys</title>
	<para id="import-auto-id1167970283448">There is nothing worse than keys falling off of the Speak N Spell. And it was always the same keys, the <emphasis effect="bold">R,</emphasis><emphasis effect="bold">S</emphasis> and <emphasis effect="bold">T</emphasis> (these three keys are not only in the area of the keyboard with the problem, but are also keys that get used the most). In figure 2 I’ve included a picture from the back of the front case showing the three keys missing on an early unit. This was finally resolved by eliminating the buttons by using a Mylar flat keyboard instead. Although a more reliable and cheaper solution, the Mylar keyboard never was, in my opinion, as good of a solution as the button keyboard.  Now for the story of how it happened.</para><figure id="import-auto-id1167970193806"><media id="import-auto-id1167971777710" alt="">
        <image mime-type="image/jpg" src="../../media/graphics1-eed6.jpg" height="384" width="512"/>
      </media>
    <caption>The missing keys as viewed from the back side of the front case.</caption></figure><para id="import-auto-id1167970815311">Richard Chang, the person who did the mechanical design for the Speak N Spell was new to TI.  As an aside, he later became the CEO of a major corporation in China and I am proud to claim to be his first boss.  He did a great job on the design and the plastic case fit together on the first attempt to assemble it.  </para>
    <para id="import-auto-id1167970815371">Before I continue on to the issue with the keyboards, I’d like to tell another story about the mechanical design of the case. Richard made and error in the design by not specifying the various tolerances on the drawings. Without this specification, the assumed tolerance was 0.01 inches. This was far too tight of a tolerance for a plastic design. When we received the parts, the initial quality inspection found virtually every measurement to be wrong, even though all of the parts snapped together exactly as they were designed to do. But the 0.01 inch tolerance specification generated a very long list of variances. Each of which needed to have an Engineering Change Notice (ECN) written and approved. Fortunately it didn’t slow down the project, but created a great deal of busy work for Richard.</para><para id="import-auto-id1167970251567">Now, back to the story of the broken keys. To make the keyboard work without having to design a new keyboard component required us to use two high volume calculator keyboards butted to each other (see Figure 1). This made the plastic buttons offset from the optimal place to press on the keyboard to make the keys actuate. So, for a few of the keys, when the button was pushed, the key hinge was improperly stressed to electrically actuate the key. Given enough key pushes, the key would literally fall off. Fortunately, once found, the problem was resolved with a bit of creativity and knowledge of the issue. Sometime during the second year of production the button keys were replaced by a membrane keyboard which permanently make this bug go away. But it was at a cost of loosing the tactile feel of the keyboard.</para>
</section>
<section id="eip-138"><title>How to determine the date of manufacture of a Speak N Spell</title>	

    <para id="import-auto-id6179035">Now, the good news is, if you want to buy a Speak N Spell, in the after market, from the first year of production, the fact that the product has button keys and there are keys missing, is a dead give away.  Yes, they are still available on Ebay.</para><para id="import-auto-id8758290">Next, for an important way to actually determine when the Speak N Spell you own was manufactured.  The answer is on the back case where the serial number and date code have been scribed.  Here is how the date code works.  It is a seven character sequence under the serial number.  It has the form of three letters and four numbers:</para><para id="import-auto-id1167970508370">AAANNNN</para><para id="import-auto-id1167970510769">The three letters represent the location of manufacture. The first year of manufacture was in Midland, Texas. That would make the three letters MTA for Midland, Texas, America. The four numbers that follow give the week and year of manufacture. We began manufacture of the Speak N Spell in August of 1978. So the first two numbers should be somewhere between 30 to 52. The last two digits should be 78. See Figure 3 for an example of the date code.</para><para id="eip-876"><figure id="datacode">
<media id="import-auto-id11679033" alt="">
        <image mime-type="image/jpg" src="../../media/SNS serial number and date code.jpg" height="250" width="300"/>
      </media>
<caption> The serial number and date code on the back lower right hand corner of the Speak N Spell. The date code reads "MTA0181". This translates to the product was manufactured in Midland, Texas, USA during the first week of 1981.</caption>
</figure></para></section></content>
</document>